FORMAT: 1A
HOST: http://api.floworky.com/api/v1

# floworky

Floworky is a workflow tool for productivity

## User [/user]

### Register User [POST]

+ Request (application/json)

    + Headers

            Location: /register

    + Body

            {
                "email": "me@me.com",
                "password": "123"
            }

+ Response 201 (application/json)

### Authenticate User [POST]

+ Request (application/json)

    + Headers

            Location: /authenticate

    + Body

            {
                "email": "me@me.com",
                "password": "123"
            }

+ Response 200 (application/json)

    + Body

            {
               "token": 'token-string'
            }

## Item [/items]

### All Items [GET]

+ Request (application/json)

    + Headers

            Location: /
            Authorization: 'token-string'

+ Response 201 (application/json)

    + Body

            {
                "tree": [
                  {
                    "id": 1,
                    "title": "give dev $200",
                    "description": "in exchange for egiftcard",
                    "completed": false,
                    "parent_id": 0,
                    "user_id": 11,
                    "createdAt": "2016-10-25T20:40:17.123Z",
                    "updatedAt": "2016-10-25T20:40:17.123Z"
                  },
                  {
                    "id": 2,
                    "title": "check bank acct",
                    "description": "now",
                    "completed": false,
                    "parent_id": 1,
                    "user_id": 11,
                    "createdAt": "2016-10-25T20:40:29.015Z",
                    "updatedAt": "2016-10-25T20:40:29.015Z"
                  }
                ]
            }

### Create Item [GET]

+ Request (application/json)

    + Headers

            Location: /create
            Authorization: 'token-string'

HOST: http://polls.apiblueprint.org/

# floworky

Polls is a simple API allowing consumers to view polls and vote in them.

## Questions Collection [/questions]

### List All Questions [GET]

+ Response 200 (application/json)

        [
            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 2048
                    }, {
                        "choice": "Python",
                        "votes": 1024
                    }, {
                        "choice": "Objective-C",
                        "votes": 512
                    }, {
                        "choice": "Ruby",
                        "votes": 256
                    }
                ]
            }
        ]

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "title": "Some Title",
                "description": "Some Description",
                "parent_id": 0
            }

+ Response 200 (application/json)

    + Body

            {}
